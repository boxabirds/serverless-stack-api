# NOTE: update this with your service name
service: notes-app-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: prod
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  sampleEnvVar: ${env:SAMPLE_ENV_VAR}
  environment:

    # acess via process.env Node.js variable
    tableName: notes

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # TODO reduce scope so it only accesses our db
      # after this is tested, change it to arn:aws:dynamodb:us-east-1:968984012907:table/notes
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  create:
    # maps to create.js function 'main'
    handler: create.main 
    events:

      # Triggers API Gateway setup
      - http:
          path: notes
          method: post

          # because our frontend is going to be served from a different domain
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    events: 
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: list.main
    events: 
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
