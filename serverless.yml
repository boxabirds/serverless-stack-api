org: boxabirds
app: notamelo
# NOTE: update this with your service name
service: notes-app-2-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # for serverless-bundle -- webpack wrapper
  bundle:
    sourcemaps: true      # Source maps link minified output to original source
    caching: true         # caching not recommended in development
    stats: true           # see the WebPack output
    linting: false        # Disable linting as a part of the build process
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-notes

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  sampleEnvVar: ${env:SAMPLE_ENV_VAR}

  tracing:
    apiGateway: true
    lambda: true

  environment:
    # access via process.env Node.js variable
    tableName: ${self:custom.tableName}
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      # TODO reduce scope so it only accesses our db
      # after this is tested, change it to arn:aws:dynamodb:us-east-1:968984012907:table/notes
      Resource: 
        - "Fn::GetAtt": [ NotesTable, Arn ]

functions:
  create:
    # maps to create.js function 'main'
    handler: create.main 
    events:

      # Triggers API Gateway setup
      - http:
          path: notes
          method: post

          # because our frontend is going to be served from a different domain
          cors: true
          authorizer: aws_iam

  get:
    handler: get.main
    events: 
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: list.main
    events: 
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # maps to update.js function 'main'
    handler: update.main 
    events:
      # Triggers API Gateway setup
      - http:
          path: notes/{id}
          method: put

          # because our frontend is going to be served from a different domain
          cors: true
          authorizer: aws_iam

  delete:
    handler: delete.main
    events: 
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam


  # TODO add query / search to find a note
  # https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html
  # Note that you have to explicitly use 'scan' for non-indexed elements

  billing:
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam
resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}